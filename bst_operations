package com.example.demo;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class BinaryTree {

    public static void main(String[] args) {

        BinaryTree binaryTree = new BinaryTree();
        Node root = binaryTree.construct();
//        binaryTree.preOrderTraversal(root);
//        binaryTree.postOrderTraversal(root);
        //      binaryTree.inOrderTraversal(root);
//        binaryTree.levelOrderTraversal(root);
//        binaryTree.diameterOfTree(root);
//        boolean isBalanced = binaryTree.isBalanced(root).isBalanced;
//        System.out.println(isBalanced);
//        System.out.println(binaryTree.findPath(root)); // preorder traversal
        //       System.out.println(binaryTree.nmberOfNodes(root));
        //       System.out.println(binaryTree.numberOfLeafNodes(root));
        binaryTree.givenLevel(root, 4, 0);
        binaryTree.printLevelOrderRecursion(root);

        // Finding a path to given element using preOrder Traversal
//        List<Integer> path = new ArrayList<>();
//        binaryTree.getPath(root, path, 15); // preorder traversal
//        System.out.println(path);

        // Common ancestor - using inorder traversal
//        Node cmNode = null;
//        binaryTree.commonAncestor(root, 12, 13, cmNode);
//        System.out.println(cmNode == null ? -1 : cmNode.data);


        //   System.out.println(binaryTree.findPath2(root, 12, 15));
    }

    

    private void givenLevel(Node root, int level, int currentLevel) {
        if (root == null) {
            return;
        }
        else if (level == 0) {
            System.out.println(root.data);
        }
        else if (level == currentLevel) {
            System.out.println(root.data);
        }
        givenLevel(root.left, level, currentLevel + 1);
        givenLevel(root.right, level, currentLevel + 1);
    }

    private int numberOfLeafNodes(Node root) {
        if (root == null) {
            return 0;
        }
        if (root.left == null && root.right == null) {
            return 1;
        }
        return numberOfLeafNodes(root.left) + numberOfLeafNodes(root.right);
    }

    private int nmberOfNodes(Node root) {
        if (root == null) {
            return 0;
        }
        return 1 + nmberOfNodes(root.right) + nmberOfNodes(root.left);
    }

    private boolean commonAncestor(Node root, int element1, int element2, Node cmNode) {
        if (root == null || cmNode != null) {
            return false;
        }
        if (root.data == element1 || root.data == element2) {
            return true;
        }

        int leftPresence = commonAncestor(root.left, element1, element2, cmNode) ? 1 : 0;
        int rightPresence = commonAncestor(root.right, element1, element2, cmNode) ? 1 : 0;
        int isRootMatched = (root.data == element1 || root.data == element2) ? 1 : 0;

        if (leftPresence + rightPresence + isRootMatched >= 2) {
            cmNode = root;
        }
        return (leftPresence + rightPresence + isRootMatched > 0);
    }

    private boolean findPath2(Node root, int ele1, int ele2) {


        boolean rightPresence = findPath2(root.right, ele1, ele2);
        boolean leftPresence = findPath2(root.left, ele1, ele2);


        return false;
    }

    private int findPath(Node root) {
        List<Integer> path = new ArrayList<>();
        int element = 15;

        List<Integer> path2 = new ArrayList<>();
        int element2 = 12;

        getPath(root, path, element);
        getPath(root, path2, element2);
        for (int i = 0; i < path.size() && i < path2.size(); i++) {
            if (path.get(i) != path2.get(i)) {
                return path.get(i - 1);
            }
        }
        return -1;
    }

    private void getPath(Node root, List<Integer> path, int element) {
        if (root == null) {
            return;
        }
        path.add(root.data);
        if (!isPresent(path, element)) {
            getPath(root.left, path, element);
        }
        if (!isPresent(path, element)) {
            getPath(root.right, path, element);
        }
        if (!isPresent(path, element)) {
            path.remove(path.size() - 1);
        }
    }

    private boolean isPresent(List<Integer> path, int element) {
        for (Integer p : path) {
            if (p == element) {
                return true;
            }
        }
        return false;
    }


    private BalancedPair isBalanced(Node root) {
        if (root == null) {
            return new BalancedPair(-1, true);
        }
        BalancedPair leftBalancePair = isBalanced(root.left);
        BalancedPair rightBalancePair = isBalanced(root.right);
        if (leftBalancePair.isBalanced && rightBalancePair.isBalanced) {
            return new BalancedPair(Math.max(leftBalancePair.height, rightBalancePair.height) + 1, Math.abs(leftBalancePair.height - rightBalancePair.height) <= 1);
        }
        else {
            return new BalancedPair(Math.max(leftBalancePair.height, rightBalancePair.height) + 1, false);
        }
    }


    private void diameterOfTree(Node root) {
        int leftHeight = heightOfTree(root.left);
        int rightHeight = heightOfTree(root.right);
        System.out.println("lh : " + leftHeight);
        System.out.println("rh : " + rightHeight);

        System.out.println("Diameter : " + leftHeight + rightHeight + 1);
    }

    private int heightOfTree(Node root) {
        if (root == null) {
            return 0;
        }
        int leftHeight = 1 + heightOfTree(root.left);
        int rightHeight = 1 + heightOfTree(root.right);

        return leftHeight >= rightHeight ? leftHeight : rightHeight;
    }

    private void levelOrderTraversal(Node root) {
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            Node node = queue.poll();
            System.out.println(node.data);
            if (node.left != null) {
                queue.offer(node.left);
            }
            if (node.right != null) {
                queue.offer(node.right);
            }
        }
    }

    private void preOrderTraversal(Node root) {
        if (root == null) {
            return;
        }
        System.out.println(root.data);
        preOrderTraversal(root.left);
        preOrderTraversal(root.right);
    }

    private void postOrderTraversal(Node root) {
        if (root == null) {
            return;
        }
        postOrderTraversal(root.left);
        postOrderTraversal(root.right);
        System.out.println(root.data);
    }

    private void inOrderTraversal(Node root) {
        if (root == null) {
            return;
        }
        inOrderTraversal(root.left);
        System.out.println(root.data);
        preOrderTraversal(root.right);
    }


    private Node construct() {

        Node leaf1 = new Node(10, null, null);
        Node leaf2 = new Node(11, null, null);
        Node leaf3 = new Node(12, null, null);

        Node leaf411 = new Node(15, null, null);
        Node leaf41 = new Node(14, leaf411, null);

        Node leaf4 = new Node(13, leaf41, null);


        Node c1 = new Node(9, leaf1, leaf2);
        Node c2 = new Node(8, leaf3, leaf4);

        Node root = new Node(7, c1, c2);

        return root;
    }


    class Node {
        int data;
        Node left;
        Node right;

        Node(int data, Node left, Node right) {
            this.data = data;
            this.left = left;
            this.right = right;
        }
    }

    class BalancedPair {
        int height;
        boolean isBalanced;

        BalancedPair(int height, boolean isBalanced) {
            this.height = height;
            this.isBalanced = isBalanced;
        }
    }
}
