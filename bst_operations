package com.example.demo;

import java.util.LinkedList;
import java.util.Queue;

public class BinaryTree {

    public static void main(String[] args) {

        BinaryTree binaryTree = new BinaryTree();
        Node root = binaryTree.construct();
//        binaryTree.preOrderTraversal(root);
//        binaryTree.postOrderTraversal(root);
//        binaryTree.inOrderTraversal(root);
//        binaryTree.levelOrderTraversal(root);
        binaryTree.diameterOfTree(root);
        boolean isBalanced = binaryTree.isBalanced(root).isBalanced;
        System.out.println(isBalanced);
    }


    private BalancedPair isBalanced(Node root) {
        if (root == null) {
            return new BalancedPair(-1, true);
        }
        BalancedPair leftBalancePair = isBalanced(root.left);
        BalancedPair rightBalancePair = isBalanced(root.right);
        if (leftBalancePair.isBalanced && rightBalancePair.isBalanced) {
            return new BalancedPair(Math.max(leftBalancePair.height, rightBalancePair.height) + 1, Math.abs(leftBalancePair.height - rightBalancePair.height) <= 1);
        }
        else {
            return new BalancedPair(Math.max(leftBalancePair.height, rightBalancePair.height) + 1, false);
        }
    }


    private void diameterOfTree(Node root) {
        int leftHeight = heightOfTree(root.left);
        int rightHeight = heightOfTree(root.right);
        System.out.println("lh : " + leftHeight);
        System.out.println("rh : " + rightHeight);

        System.out.println("Diameter : " + leftHeight + rightHeight + 1);
    }

    private int heightOfTree(Node root) {
        if (root == null) {
            return 0;
        }
        int leftHeight = 1 + heightOfTree(root.left);
        int rightHeight = 1 + heightOfTree(root.right);

        return leftHeight >= rightHeight ? leftHeight : rightHeight;
    }

    private void levelOrderTraversal(Node root) {
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            Node node = queue.poll();
            System.out.println(node.data);
            if (node.left != null) {
                queue.offer(node.left);
            }
            if (node.right != null) {
                queue.offer(node.right);
            }
        }
    }

    private void preOrderTraversal(Node root) {
        if (root == null) {
            return;
        }
        System.out.println(root.data);
        preOrderTraversal(root.left);
        preOrderTraversal(root.right);
    }

    private void postOrderTraversal(Node root) {
        if (root == null) {
            return;
        }
        postOrderTraversal(root.left);
        postOrderTraversal(root.right);
        System.out.println(root.data);
    }

    private void inOrderTraversal(Node root) {
        if (root == null) {
            return;
        }
        inOrderTraversal(root.left);
        System.out.println(root.data);
        preOrderTraversal(root.right);
    }


    private Node construct() {

        Node leaf1 = new Node(10, null, null);
        Node leaf2 = new Node(11, null, null);
        Node leaf3 = new Node(12, null, null);

        Node leaf411 = new Node(14, null, null);
        Node leaf41 = new Node(14, leaf411, null);

        Node leaf4 = new Node(13, leaf41, null);


        Node c1 = new Node(9, leaf1, leaf2);
        Node c2 = new Node(8, leaf3, leaf4);

        Node root = new Node(7, c1, c2);

        return root;
    }


    class Node {
        int data;
        Node left;
        Node right;

        Node(int data, Node left, Node right) {
            this.data = data;
            this.left = left;
            this.right = right;
        }
    }

    class BalancedPair {
        int height;
        boolean isBalanced;

        BalancedPair(int height, boolean isBalanced) {
            this.height = height;
            this.isBalanced = isBalanced;
        }
    }
}
